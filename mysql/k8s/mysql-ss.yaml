apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  template:
      metadata:
        labels:
          app: mysql
      spec:
        initContainers:
          - name: init-mysql
            image: mysql:5.7
            command:
              - bash
              - -c
              - |
                set -ex
                # 从Pod的序号，生成server-id
                [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
                ordinal=${BASH_REMATCH[1]}
                echo [mysqld] > /mnt/conf.d/server-id.cnf
                # 由于server-id=0有特殊含义，我们给ID加一个100来避开它
                echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
                # 如果Pod序号是0，说明它是Master节点，从ConfigMap里把Master的配置文件拷贝到/mnt/conf.d/目录；
                # 否则，拷贝Slave的配置文件
                if [[ $ordinal -eq 0 ]]; then
                  cp /mnt/config-map/master.cnf /mnt/conf.d/
                else
                  cp /mnt/config-map/slave.cnf /mnt/conf.d/
                fi
            volumeMounts:
              - mountPath: /mnt/conf.d
                name: conf
              - mountPath: /mnt/config-map
                name: config-map
          - name: clone-mysql
            image: gcr.io/google-samples/xtrabackup:1.0
            command:
              - bash
              - "-c"
              - |
                set -ex
                # 拷贝操作只需要在第一次启动时进行，所以如果数据已经存在，跳过
                [[ -d /var/lib/mysql/mysql ]] && exit 0
                # Master节点(序号为0)不需要做这个操作
                [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
                ordinal=${BASH_REMATCH[1]}
                [[ $ordinal -eq 0 ]] && exit 0
                # 使用ncat指令，远程地从前一个节点拷贝数据到本地
                ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
                # 执行--prepare，这样拷贝来的数据就可以用作恢复了
                xtrabackup --prepare --target-dir=/var/lib/mysql
            volumeMounts:
              - name: data
                mountPath: /var/lib/mysql
                subPath: mysql
              - name: conf
                mountPath: /etc/mysql/conf.d
        containers:
          - name: mysql
            image: mysql:5.7
            env:
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "1"
            ports:
              - name: mysql
                containerPort: 3306
            volumeMounts:
              - name: data
                mountPath: /var/lib/mysql
                subPath: mysql
              - name: conf
                mountPath: /etc/mysql/conf.d
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
            livenessProbe:
              exec:
                command: ["mysqladmin", "ping"]
              initialDelaySeconds: 30
              periodSeconds: 10
              timeoutSeconds: 5
            readinessProbe:
              exec:
                # 通过TCP连接的方式进行健康检查
                command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
              initialDelaySeconds: 5
              periodSeconds: 2
              timeoutSeconds: 1
          - name: xtrabackup
            image: gcr.io/google-samples/xtrabackup:1.0
            ports:
              - name: xtrabackup
                containerPort: 3307
            command:
              - bash
              - "-c"
              - |
                set -ex
                cd /var/lib/mysql

                # 从备份信息文件里读取MASTER_LOG_FILEM和MASTER_LOG_POS这两个字段的值，用来拼装集群初始化SQL
                if [[ -f xtrabackup_slave_info ]]; then
                  # 如果xtrabackup_slave_info文件存在，说明这个备份数据来自于另一个Slave节点。这种情况下，XtraBackup工具在备份的时候，就已经在这个文件里自动生成了"CHANGE MASTER TO" SQL语句。所以，我们只需要把这个文件重命名为change_master_to.sql.in，后面直接使用即可
                  mv xtrabackup_slave_info change_master_to.sql.in
                  # 所以，也就用不着xtrabackup_binlog_info了
                  rm -f xtrabackup_binlog_info
                elif [[ -f xtrabackup_binlog_info ]]; then
                  # 如果只存在xtrabackup_binlog_inf文件，那说明备份来自于Master节点，我们就需要解析这个备份信息文件，读取所需的两个字段的值
                  [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                  rm xtrabackup_binlog_info
                  # 把两个字段的值拼装成SQL，写入change_master_to.sql.in文件
                  echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                        MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
                fi

                # 如果change_master_to.sql.in，就意味着需要做集群初始化工作
                if [[ -f change_master_to.sql.in ]]; then
                  # 但一定要先等MySQL容器启动之后才能进行下一步连接MySQL的操作
                  echo "Waiting for mysqld to be ready (accepting connections)"
                  until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

                  echo "Initializing replication from clone position"
                  # 将文件change_master_to.sql.in改个名字，防止这个Container重启的时候，因为又找到了change_master_to.sql.in，从而重复执行一遍这个初始化流程
                  mv change_master_to.sql.in change_master_to.sql.orig
                  # 使用change_master_to.sql.orig的内容，也是就是前面拼装的SQL，组成一个完整的初始化和启动Slave的SQL语句
                  mysql -h 127.0.0.1 <<EOF
                $(<change_master_to.sql.orig),
                  MASTER_HOST='mysql-0.mysql',
                  MASTER_USER='root',
                  MASTER_PASSWORD='',
                  MASTER_CONNECT_RETRY=10;
                START SLAVE;
                EOF
                fi

                # 使用ncat监听3307端口。它的作用是，在收到传输请求的时候，直接执行"xtrabackup --backup"命令，备份MySQL的数据并发送给请求者
                exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                  "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
            volumeMounts:
              - name: data
                mountPath: /var/lib/mysql
                subPath: mysql
              - name: conf
                mountPath: /etc/mysql/conf.d
        volumes:
          - name: conf
            emptyDir:
              {}
          - name: config-map
            configMap:
              name: mysql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 3Gi
